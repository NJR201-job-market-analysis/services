version: '3.0'

services:
  # 初始化 Airflow 資料庫
  initdb:
    image: ${DOCKER_IMAGE_USERNAME}/jobmarket-dataflow:${DOCKER_IMAGE_VERSION}  # 使用指定版本的自定義映像
    command: pipenv run airflow db init  # 初始化 Airflow 的 metadata DB
    restart: no
    deploy:
      mode: replicated  # 使用 swarm replicated 模式
      replicas: 1  # 執行一個副本
      placement:
        constraints: [node.labels.airflow == true]  # 僅部署在標記為 airflow 的節點
      restart_policy:
        condition: none
    networks:
      - jobmarket-swarm-network  # 使用外部 swarm 網路

  # 建立 Airflow 使用者
  create-user:
    image: ${DOCKER_IMAGE_USERNAME}/jobmarket-dataflow:${DOCKER_IMAGE_VERSION}  # 同一映像
    command: pipenv run airflow users create --username admin --firstname lin --lastname sam --role Admin -p admin --email finmind.tw@gmail.com  # 建立管理者帳號
    depends_on:
      - initdb  # 等待 initdb 完成後再執行
    restart: no
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.labels.airflow == true]
      restart_policy:
        condition: none
    networks:
      - jobmarket-swarm-network

  redis:
    image: 'bitnami/redis:latest'
    ports:
        - 6379:6379
    volumes:
        - 'redis_data:/bitnami/redis/data'
    environment:
        - ALLOW_EMPTY_PASSWORD=yes
    restart: always
    # swarm 設定
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.labels.airflow == true]
    networks:
        - jobmarket-swarm-network

  # Airflow Web UI 介面
  webserver:
    image: ${DOCKER_IMAGE_USERNAME}/jobmarket-dataflow:${DOCKER_IMAGE_VERSION}
    hostname: "airflow-webserver"  # 指定主機名稱
    command: pipenv run airflow webserver -p 5566  # 啟動 webserver，使用 5000 port
    depends_on:
      - initdb  # 等待資料庫初始化
    restart: always  # 永遠重新啟動（即使正常退出也重啟）
    ports:
      - 5566:5566  # 對外開放 5000 port
    environment:
      - TZ=Asia/Taipei  # 設定時區
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.labels.airflow == true]
    networks:
      - jobmarket-swarm-network

  flower:
    # MAC環境用這個
    # image: mher/flower:1.2.0
    # Windows環境用這個
    image: mher/flower:0.9.5
    restart: always
    depends_on:
      - redis
    # Windows環境用這個
    command: ["flower", "--broker=redis://redis:6379/0", "--port=5555"]
    # MAC環境用這個
    # command: ["celery", "--broker=redis://redis:6379/0", "flower", "--port=5555"]
    ports:
        - "5556:5555"
    # swarm 設定
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.labels.airflow == true]
    networks:
        - jobmarket-swarm-network
  
  # Airflow 排程器，負責執行 DAG 任務
  scheduler:
    image: ${DOCKER_IMAGE_USERNAME}/jobmarket-dataflow:${DOCKER_IMAGE_VERSION}
    hostname: "airflow-scheduler"
    command: pipenv run airflow scheduler  # 啟動 scheduler
    depends_on:
      - initdb
    restart: always
    environment:
      - TZ=Asia/Taipei
    # 將容器內的 docker 與容器外的 docker 做連結
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.labels.airflow == true]
    networks:
      - jobmarket-swarm-network

  worker:
    image: ${DOCKER_IMAGE_USERNAME}/jobmarket-dataflow:${DOCKER_IMAGE_VERSION}
    hostname: "{{.Service.Name}}.{{.Task.Slot}}"
    restart: always
    # 將容器內的 docker 與容器外的 docker 做連結
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - scheduler
    command: pipenv run airflow celery worker
    # swarm 設定
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.labels.airflow == true]
    networks:
        - jobmarket-swarm-network

  crawler-queue:
    image: ${DOCKER_IMAGE_USERNAME}/jobmarket-dataflow:${DOCKER_IMAGE_VERSION}
    hostname: "{{.Service.Name}}.{{.Task.Slot}}"
    restart: always
    # 將容器內的 docker 與容器外的 docker 做連結
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - scheduler
    command: pipenv run airflow celery worker -q crawler-queue
    # swarm 設定
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.labels.airflow == true]
    networks:
        - jobmarket-swarm-network

# 使用外部已建立好的 Docker Swarm 網路
networks:
  jobmarket-swarm-network:
    external: true

volumes:
  redis_data:
